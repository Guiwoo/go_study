// Code generated by ent, DO NOT EDIT.

package tester

import (
	"semina_entgo/custom"
	"semina_entgo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tester {
	return predicate.Tester(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tester {
	return predicate.Tester(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tester {
	return predicate.Tester(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tester {
	return predicate.Tester(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tester {
	return predicate.Tester(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tester {
	return predicate.Tester(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tester {
	return predicate.Tester(sql.FieldLTE(FieldID, id))
}

// PascalCase applies equality check predicate on the "PascalCase" field. It's identical to PascalCaseEQ.
func PascalCase(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldPascalCase, v))
}

// LetMeCheck applies equality check predicate on the "let_me_check" field. It's identical to LetMeCheckEQ.
func LetMeCheck(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldLetMeCheck, v))
}

// PascalCaseEQ applies the EQ predicate on the "PascalCase" field.
func PascalCaseEQ(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldPascalCase, v))
}

// PascalCaseNEQ applies the NEQ predicate on the "PascalCase" field.
func PascalCaseNEQ(v string) predicate.Tester {
	return predicate.Tester(sql.FieldNEQ(FieldPascalCase, v))
}

// PascalCaseIn applies the In predicate on the "PascalCase" field.
func PascalCaseIn(vs ...string) predicate.Tester {
	return predicate.Tester(sql.FieldIn(FieldPascalCase, vs...))
}

// PascalCaseNotIn applies the NotIn predicate on the "PascalCase" field.
func PascalCaseNotIn(vs ...string) predicate.Tester {
	return predicate.Tester(sql.FieldNotIn(FieldPascalCase, vs...))
}

// PascalCaseGT applies the GT predicate on the "PascalCase" field.
func PascalCaseGT(v string) predicate.Tester {
	return predicate.Tester(sql.FieldGT(FieldPascalCase, v))
}

// PascalCaseGTE applies the GTE predicate on the "PascalCase" field.
func PascalCaseGTE(v string) predicate.Tester {
	return predicate.Tester(sql.FieldGTE(FieldPascalCase, v))
}

// PascalCaseLT applies the LT predicate on the "PascalCase" field.
func PascalCaseLT(v string) predicate.Tester {
	return predicate.Tester(sql.FieldLT(FieldPascalCase, v))
}

// PascalCaseLTE applies the LTE predicate on the "PascalCase" field.
func PascalCaseLTE(v string) predicate.Tester {
	return predicate.Tester(sql.FieldLTE(FieldPascalCase, v))
}

// PascalCaseContains applies the Contains predicate on the "PascalCase" field.
func PascalCaseContains(v string) predicate.Tester {
	return predicate.Tester(sql.FieldContains(FieldPascalCase, v))
}

// PascalCaseHasPrefix applies the HasPrefix predicate on the "PascalCase" field.
func PascalCaseHasPrefix(v string) predicate.Tester {
	return predicate.Tester(sql.FieldHasPrefix(FieldPascalCase, v))
}

// PascalCaseHasSuffix applies the HasSuffix predicate on the "PascalCase" field.
func PascalCaseHasSuffix(v string) predicate.Tester {
	return predicate.Tester(sql.FieldHasSuffix(FieldPascalCase, v))
}

// PascalCaseEqualFold applies the EqualFold predicate on the "PascalCase" field.
func PascalCaseEqualFold(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEqualFold(FieldPascalCase, v))
}

// PascalCaseContainsFold applies the ContainsFold predicate on the "PascalCase" field.
func PascalCaseContainsFold(v string) predicate.Tester {
	return predicate.Tester(sql.FieldContainsFold(FieldPascalCase, v))
}

// LetMeCheckEQ applies the EQ predicate on the "let_me_check" field.
func LetMeCheckEQ(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldLetMeCheck, v))
}

// LetMeCheckNEQ applies the NEQ predicate on the "let_me_check" field.
func LetMeCheckNEQ(v string) predicate.Tester {
	return predicate.Tester(sql.FieldNEQ(FieldLetMeCheck, v))
}

// LetMeCheckIn applies the In predicate on the "let_me_check" field.
func LetMeCheckIn(vs ...string) predicate.Tester {
	return predicate.Tester(sql.FieldIn(FieldLetMeCheck, vs...))
}

// LetMeCheckNotIn applies the NotIn predicate on the "let_me_check" field.
func LetMeCheckNotIn(vs ...string) predicate.Tester {
	return predicate.Tester(sql.FieldNotIn(FieldLetMeCheck, vs...))
}

// LetMeCheckGT applies the GT predicate on the "let_me_check" field.
func LetMeCheckGT(v string) predicate.Tester {
	return predicate.Tester(sql.FieldGT(FieldLetMeCheck, v))
}

// LetMeCheckGTE applies the GTE predicate on the "let_me_check" field.
func LetMeCheckGTE(v string) predicate.Tester {
	return predicate.Tester(sql.FieldGTE(FieldLetMeCheck, v))
}

// LetMeCheckLT applies the LT predicate on the "let_me_check" field.
func LetMeCheckLT(v string) predicate.Tester {
	return predicate.Tester(sql.FieldLT(FieldLetMeCheck, v))
}

// LetMeCheckLTE applies the LTE predicate on the "let_me_check" field.
func LetMeCheckLTE(v string) predicate.Tester {
	return predicate.Tester(sql.FieldLTE(FieldLetMeCheck, v))
}

// LetMeCheckContains applies the Contains predicate on the "let_me_check" field.
func LetMeCheckContains(v string) predicate.Tester {
	return predicate.Tester(sql.FieldContains(FieldLetMeCheck, v))
}

// LetMeCheckHasPrefix applies the HasPrefix predicate on the "let_me_check" field.
func LetMeCheckHasPrefix(v string) predicate.Tester {
	return predicate.Tester(sql.FieldHasPrefix(FieldLetMeCheck, v))
}

// LetMeCheckHasSuffix applies the HasSuffix predicate on the "let_me_check" field.
func LetMeCheckHasSuffix(v string) predicate.Tester {
	return predicate.Tester(sql.FieldHasSuffix(FieldLetMeCheck, v))
}

// LetMeCheckEqualFold applies the EqualFold predicate on the "let_me_check" field.
func LetMeCheckEqualFold(v string) predicate.Tester {
	return predicate.Tester(sql.FieldEqualFold(FieldLetMeCheck, v))
}

// LetMeCheckContainsFold applies the ContainsFold predicate on the "let_me_check" field.
func LetMeCheckContainsFold(v string) predicate.Tester {
	return predicate.Tester(sql.FieldContainsFold(FieldLetMeCheck, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v Size) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v Size) predicate.Tester {
	return predicate.Tester(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...Size) predicate.Tester {
	return predicate.Tester(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...Size) predicate.Tester {
	return predicate.Tester(sql.FieldNotIn(FieldSize, vs...))
}

// ShapeEQ applies the EQ predicate on the "shape" field.
func ShapeEQ(v custom.Shape) predicate.Tester {
	vc := v
	return predicate.Tester(sql.FieldEQ(FieldShape, vc))
}

// ShapeNEQ applies the NEQ predicate on the "shape" field.
func ShapeNEQ(v custom.Shape) predicate.Tester {
	vc := v
	return predicate.Tester(sql.FieldNEQ(FieldShape, vc))
}

// ShapeIn applies the In predicate on the "shape" field.
func ShapeIn(vs ...custom.Shape) predicate.Tester {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tester(sql.FieldIn(FieldShape, v...))
}

// ShapeNotIn applies the NotIn predicate on the "shape" field.
func ShapeNotIn(vs ...custom.Shape) predicate.Tester {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tester(sql.FieldNotIn(FieldShape, v...))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v custom.Level) predicate.Tester {
	return predicate.Tester(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v custom.Level) predicate.Tester {
	return predicate.Tester(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...custom.Level) predicate.Tester {
	return predicate.Tester(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...custom.Level) predicate.Tester {
	return predicate.Tester(sql.FieldNotIn(FieldLevel, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tester) predicate.Tester {
	return predicate.Tester(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tester) predicate.Tester {
	return predicate.Tester(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tester) predicate.Tester {
	return predicate.Tester(sql.NotPredicates(p))
}
