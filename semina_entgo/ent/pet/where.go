// Code generated by ent, DO NOT EDIT.

package pet

import (
	"semina_entgo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldID, id))
}

// Breed applies equality check predicate on the "breed" field. It's identical to BreedEQ.
func Breed(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSex, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldAge, v))
}

// BreedEQ applies the EQ predicate on the "breed" field.
func BreedEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// BreedNEQ applies the NEQ predicate on the "breed" field.
func BreedNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldBreed, v))
}

// BreedIn applies the In predicate on the "breed" field.
func BreedIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldBreed, vs...))
}

// BreedNotIn applies the NotIn predicate on the "breed" field.
func BreedNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldBreed, vs...))
}

// BreedGT applies the GT predicate on the "breed" field.
func BreedGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldBreed, v))
}

// BreedGTE applies the GTE predicate on the "breed" field.
func BreedGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldBreed, v))
}

// BreedLT applies the LT predicate on the "breed" field.
func BreedLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldBreed, v))
}

// BreedLTE applies the LTE predicate on the "breed" field.
func BreedLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldBreed, v))
}

// BreedContains applies the Contains predicate on the "breed" field.
func BreedContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldBreed, v))
}

// BreedHasPrefix applies the HasPrefix predicate on the "breed" field.
func BreedHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldBreed, v))
}

// BreedHasSuffix applies the HasSuffix predicate on the "breed" field.
func BreedHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldBreed, v))
}

// BreedEqualFold applies the EqualFold predicate on the "breed" field.
func BreedEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldBreed, v))
}

// BreedContainsFold applies the ContainsFold predicate on the "breed" field.
func BreedContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldBreed, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldSex, v))
}

// SexContains applies the Contains predicate on the "sex" field.
func SexContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldSex, v))
}

// SexHasPrefix applies the HasPrefix predicate on the "sex" field.
func SexHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldSex, v))
}

// SexHasSuffix applies the HasSuffix predicate on the "sex" field.
func SexHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldSex, v))
}

// SexEqualFold applies the EqualFold predicate on the "sex" field.
func SexEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldSex, v))
}

// SexContainsFold applies the ContainsFold predicate on the "sex" field.
func SexContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldSex, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldAge, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.NotPredicates(p))
}
