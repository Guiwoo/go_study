// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"semina_entgo/custom"
	"semina_entgo/ent/tester"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tester is the model dto for the Tester schema.
type Tester struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PascalCase holds the value of the "PascalCase" field.
	PascalCase string `json:"PascalCase,omitempty"`
	// LetMeCheck holds the value of the "let_me_check" field.
	LetMeCheck string `json:"let_me_check,omitempty"`
	// Size holds the value of the "size" field.
	Size tester.Size `json:"size,omitempty"`
	// Shape holds the value of the "shape" field.
	Shape custom.Shape `json:"shape,omitempty"`
	// Level holds the value of the "level" field.
	Level        custom.Level `json:"level,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tester) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tester.FieldLevel:
			values[i] = new(custom.Level)
		case tester.FieldID:
			values[i] = new(sql.NullInt64)
		case tester.FieldPascalCase, tester.FieldLetMeCheck, tester.FieldSize, tester.FieldShape:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tester fields.
func (t *Tester) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tester.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tester.FieldPascalCase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PascalCase", values[i])
			} else if value.Valid {
				t.PascalCase = value.String
			}
		case tester.FieldLetMeCheck:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field let_me_check", values[i])
			} else if value.Valid {
				t.LetMeCheck = value.String
			}
		case tester.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				t.Size = tester.Size(value.String)
			}
		case tester.FieldShape:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shape", values[i])
			} else if value.Valid {
				t.Shape = custom.Shape(value.String)
			}
		case tester.FieldLevel:
			if value, ok := values[i].(*custom.Level); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value != nil {
				t.Level = *value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tester.
// This includes values selected through modifiers, order, etc.
func (t *Tester) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Tester.
// Note that you need to call Tester.Unwrap() before calling this method if this Tester
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tester) Update() *TesterUpdateOne {
	return NewTesterClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tester dto that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tester) Unwrap() *Tester {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tester is not a transactional dto")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tester) String() string {
	var builder strings.Builder
	builder.WriteString("Tester(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("PascalCase=")
	builder.WriteString(t.PascalCase)
	builder.WriteString(", ")
	builder.WriteString("let_me_check=")
	builder.WriteString(t.LetMeCheck)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", t.Size))
	builder.WriteString(", ")
	builder.WriteString("shape=")
	builder.WriteString(fmt.Sprintf("%v", t.Shape))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", t.Level))
	builder.WriteByte(')')
	return builder.String()
}

// Testers is a parsable slice of Tester.
type Testers []*Tester
